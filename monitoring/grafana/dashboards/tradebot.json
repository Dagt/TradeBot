{
  "annotations": {
    "list": []
  },
  "editable": true,
  "panels": [
    {
      "type": "graph",
      "title": "API latency (95th)",
      "targets": [
        {
          "expr": "histogram_quantile(0.95, sum(rate(api_request_latency_seconds_bucket[5m])) by (le))",
          "legendFormat": "95th percentile"
        }
      ],
      "datasource": "Prometheus",
      "id": 1
    },
    {
      "type": "graph",
      "title": "WS failures",
      "targets": [
        {
          "expr": "increase(ws_failures_total[5m])",
          "legendFormat": "{{adapter}}"
        }
      ],
      "datasource": "Prometheus",
      "id": 2
    },
    {
      "type": "graph",
      "title": "Order fills",
      "targets": [
        {
          "expr": "increase(order_fills_total[5m])",
          "legendFormat": "{{symbol}} {{side}}"
        }
      ],
      "datasource": "Prometheus",
      "id": 3
    },
    {
      "type": "graph",
      "title": "Slippage (bps 95th)",
      "targets": [
        {
          "expr": "histogram_quantile(0.95, sum(rate(order_slippage_bps_bucket[5m])) by (le))",
          "legendFormat": "95th percentile"
        }
      ],
      "datasource": "Prometheus",
      "id": 4
    },
    {
      "type": "graph",
      "title": "Risk events",
      "targets": [
        {
          "expr": "increase(risk_events_total[5m])",
          "legendFormat": "{{event_type}}"
        }
      ],
      "datasource": "Prometheus",
      "id": 5
    },
    {
      "type": "stat",
      "title": "Fills (5m)",
      "targets": [
        {
          "expr": "sum(increase(order_fills_total[5m]))",
          "legendFormat": ""
        }
      ],
      "datasource": "Prometheus",
      "id": 6
    },
    {
      "type": "stat",
      "title": "Avg slippage bps (5m)",
      "targets": [
        {
          "expr": "sum(rate(order_slippage_bps_sum[5m])) / sum(rate(order_slippage_bps_count[5m]))",
          "legendFormat": ""
        }
      ],
      "datasource": "Prometheus",
      "id": 7
    },
    {
      "type": "stat",
      "title": "Risk events (5m)",
      "targets": [
        {
          "expr": "sum(increase(risk_events_total[5m]))",
          "legendFormat": ""
        }
      ],
      "datasource": "Prometheus",
      "id": 8
    },
    {
      "type": "graph",
      "title": "E2E latency (95th)",
      "targets": [
        {
          "expr": "histogram_quantile(0.95, sum(rate(e2e_latency_seconds_bucket[5m])) by (le))",
          "legendFormat": "95th percentile"
        }
      ],
      "datasource": "Prometheus",
      "id": 9
    },
    {
      "type": "stat",
      "title": "Strategy states",
      "targets": [
        {
          "expr": "strategy_state",
          "legendFormat": "{{strategy}}"
        }
      ],
      "datasource": "Prometheus",
      "id": 10
    },
    {
      "type": "graph",
      "title": "Trades per minute",
      "datasource": "Postgres",
      "targets": [
        {
          "refId": "A",
          "format": "time_series",
          "rawSql": "SELECT time_bucket('1 minute', ts) AS time, count(*) AS trades FROM market.trades WHERE symbol = '$symbol' AND ts BETWEEN '$start' AND '$end' GROUP BY time ORDER BY time"
        }
      ],
      "id": 11
    }
  ],
  "templating": {
    "list": [
      {
        "name": "symbol",
        "label": "Symbol",
        "type": "query",
        "datasource": "Postgres",
        "refresh": 1,
        "query": "SELECT DISTINCT symbol FROM market.trades ORDER BY 1",
        "current": {
          "text": "BTCUSD",
          "value": "BTCUSD"
        }
      },
      {
        "name": "start",
        "label": "Start time",
        "type": "textbox",
        "query": "now() - interval '1 hour'",
        "current": {
          "text": "now() - interval '1 hour'",
          "value": "now() - interval '1 hour'"
        }
      },
      {
        "name": "end",
        "label": "End time",
        "type": "textbox",
        "query": "now()",
        "current": {
          "text": "now()",
          "value": "now()"
        }
      }
    ]
  },
  "schemaVersion": 16,
  "title": "TradeBot Metrics",
  "uid": "tradebot",
  "version": 4
}
